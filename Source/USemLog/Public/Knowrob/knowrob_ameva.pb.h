// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: knowrob_ameva.proto
#pragma warning (disable : 4125)
#ifndef GOOGLE_PROTOBUF_INCLUDED_knowrob_5fameva_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_knowrob_5fameva_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_knowrob_5fameva_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_knowrob_5fameva_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_knowrob_5fameva_2eproto;
namespace knowrob_ameva {
class KRAmevaEvent;
class KRAmevaEventDefaultTypeInternal;
extern KRAmevaEventDefaultTypeInternal _KRAmevaEvent_default_instance_;
class ViewEntityPoseAtParams;
class ViewEntityPoseAtParamsDefaultTypeInternal;
extern ViewEntityPoseAtParamsDefaultTypeInternal _ViewEntityPoseAtParams_default_instance_;
class ViewEntityTrajParams;
class ViewEntityTrajParamsDefaultTypeInternal;
extern ViewEntityTrajParamsDefaultTypeInternal _ViewEntityTrajParams_default_instance_;
}  // namespace knowrob_ameva
PROTOBUF_NAMESPACE_OPEN
template<> ::knowrob_ameva::KRAmevaEvent* Arena::CreateMaybeMessage<::knowrob_ameva::KRAmevaEvent>(Arena*);
template<> ::knowrob_ameva::ViewEntityPoseAtParams* Arena::CreateMaybeMessage<::knowrob_ameva::ViewEntityPoseAtParams>(Arena*);
template<> ::knowrob_ameva::ViewEntityTrajParams* Arena::CreateMaybeMessage<::knowrob_ameva::ViewEntityTrajParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace knowrob_ameva {

enum KRAmevaEvent_FuncToCall : int {
  KRAmevaEvent_FuncToCall_SetDatabase = 1,
  KRAmevaEvent_FuncToCall_SetCollection = 2,
  KRAmevaEvent_FuncToCall_ViewEntityPoseAt = 3,
  KRAmevaEvent_FuncToCall_ViewEntityTraj = 4
};
bool KRAmevaEvent_FuncToCall_IsValid(int value);
constexpr KRAmevaEvent_FuncToCall KRAmevaEvent_FuncToCall_FuncToCall_MIN = KRAmevaEvent_FuncToCall_SetDatabase;
constexpr KRAmevaEvent_FuncToCall KRAmevaEvent_FuncToCall_FuncToCall_MAX = KRAmevaEvent_FuncToCall_ViewEntityTraj;
constexpr int KRAmevaEvent_FuncToCall_FuncToCall_ARRAYSIZE = KRAmevaEvent_FuncToCall_FuncToCall_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KRAmevaEvent_FuncToCall_descriptor();
template<typename T>
inline const std::string& KRAmevaEvent_FuncToCall_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KRAmevaEvent_FuncToCall>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KRAmevaEvent_FuncToCall_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KRAmevaEvent_FuncToCall_descriptor(), enum_t_value);
}
inline bool KRAmevaEvent_FuncToCall_Parse(
    const std::string& name, KRAmevaEvent_FuncToCall* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KRAmevaEvent_FuncToCall>(
    KRAmevaEvent_FuncToCall_descriptor(), name, value);
}
enum MarkerType : int {
  Box = 1,
  Sphere = 2,
  Cylinder = 3,
  Arrow = 4,
  Axis = 5
};
bool MarkerType_IsValid(int value);
constexpr MarkerType MarkerType_MIN = Box;
constexpr MarkerType MarkerType_MAX = Axis;
constexpr int MarkerType_ARRAYSIZE = MarkerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarkerType_descriptor();
template<typename T>
inline const std::string& MarkerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MarkerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MarkerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MarkerType_descriptor(), enum_t_value);
}
inline bool MarkerType_Parse(
    const std::string& name, MarkerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MarkerType>(
    MarkerType_descriptor(), name, value);
}
// ===================================================================

class ViewEntityPoseAtParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:knowrob_ameva.ViewEntityPoseAtParams) */ {
 public:
  inline ViewEntityPoseAtParams() : ViewEntityPoseAtParams(nullptr) {};
  virtual ~ViewEntityPoseAtParams();

  ViewEntityPoseAtParams(const ViewEntityPoseAtParams& from);
  ViewEntityPoseAtParams(ViewEntityPoseAtParams&& from) noexcept
    : ViewEntityPoseAtParams() {
    *this = ::std::move(from);
  }

  inline ViewEntityPoseAtParams& operator=(const ViewEntityPoseAtParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewEntityPoseAtParams& operator=(ViewEntityPoseAtParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewEntityPoseAtParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewEntityPoseAtParams* internal_default_instance() {
    return reinterpret_cast<const ViewEntityPoseAtParams*>(
               &_ViewEntityPoseAtParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ViewEntityPoseAtParams& a, ViewEntityPoseAtParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewEntityPoseAtParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewEntityPoseAtParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewEntityPoseAtParams* New() const final {
    return CreateMaybeMessage<ViewEntityPoseAtParams>(nullptr);
  }

  ViewEntityPoseAtParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewEntityPoseAtParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewEntityPoseAtParams& from);
  void MergeFrom(const ViewEntityPoseAtParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewEntityPoseAtParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "knowrob_ameva.ViewEntityPoseAtParams";
  }
  protected:
  explicit ViewEntityPoseAtParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_knowrob_5fameva_2eproto);
    return ::descriptor_table_knowrob_5fameva_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kColorFieldNumber = 5,
    kTimestampFieldNumber = 2,
    kScaleFieldNumber = 4,
    kUnlitFieldNumber = 7,
    kMarkerFieldNumber = 3,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string color = 5;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_color();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_color(
      std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // required float timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  float timestamp() const;
  void set_timestamp(float value);
  private:
  float _internal_timestamp() const;
  void _internal_set_timestamp(float value);
  public:

  // required float scale = 4;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // required bool unlit = 7;
  bool has_unlit() const;
  private:
  bool _internal_has_unlit() const;
  public:
  void clear_unlit();
  bool unlit() const;
  void set_unlit(bool value);
  private:
  bool _internal_unlit() const;
  void _internal_set_unlit(bool value);
  public:

  // required .knowrob_ameva.MarkerType marker = 3;
  bool has_marker() const;
  private:
  bool _internal_has_marker() const;
  public:
  void clear_marker();
  ::knowrob_ameva::MarkerType marker() const;
  void set_marker(::knowrob_ameva::MarkerType value);
  private:
  ::knowrob_ameva::MarkerType _internal_marker() const;
  void _internal_set_marker(::knowrob_ameva::MarkerType value);
  public:

  // @@protoc_insertion_point(class_scope:knowrob_ameva.ViewEntityPoseAtParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  float timestamp_;
  float scale_;
  bool unlit_;
  int marker_;
  friend struct ::TableStruct_knowrob_5fameva_2eproto;
};
// -------------------------------------------------------------------

class ViewEntityTrajParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:knowrob_ameva.ViewEntityTrajParams) */ {
 public:
  inline ViewEntityTrajParams() : ViewEntityTrajParams(nullptr) {};
  virtual ~ViewEntityTrajParams();

  ViewEntityTrajParams(const ViewEntityTrajParams& from);
  ViewEntityTrajParams(ViewEntityTrajParams&& from) noexcept
    : ViewEntityTrajParams() {
    *this = ::std::move(from);
  }

  inline ViewEntityTrajParams& operator=(const ViewEntityTrajParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewEntityTrajParams& operator=(ViewEntityTrajParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewEntityTrajParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewEntityTrajParams* internal_default_instance() {
    return reinterpret_cast<const ViewEntityTrajParams*>(
               &_ViewEntityTrajParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ViewEntityTrajParams& a, ViewEntityTrajParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewEntityTrajParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewEntityTrajParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewEntityTrajParams* New() const final {
    return CreateMaybeMessage<ViewEntityTrajParams>(nullptr);
  }

  ViewEntityTrajParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewEntityTrajParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewEntityTrajParams& from);
  void MergeFrom(const ViewEntityTrajParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewEntityTrajParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "knowrob_ameva.ViewEntityTrajParams";
  }
  protected:
  explicit ViewEntityTrajParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_knowrob_5fameva_2eproto);
    return ::descriptor_table_knowrob_5fameva_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kColorFieldNumber = 6,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kScaleFieldNumber = 5,
    kUnlitFieldNumber = 7,
    kMarkerFieldNumber = 4,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string color = 6;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_color();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_color(
      std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // required float start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  float start() const;
  void set_start(float value);
  private:
  float _internal_start() const;
  void _internal_set_start(float value);
  public:

  // required float end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  float end() const;
  void set_end(float value);
  private:
  float _internal_end() const;
  void _internal_set_end(float value);
  public:

  // required float scale = 5;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // required bool unlit = 7;
  bool has_unlit() const;
  private:
  bool _internal_has_unlit() const;
  public:
  void clear_unlit();
  bool unlit() const;
  void set_unlit(bool value);
  private:
  bool _internal_unlit() const;
  void _internal_set_unlit(bool value);
  public:

  // required .knowrob_ameva.MarkerType marker = 4;
  bool has_marker() const;
  private:
  bool _internal_has_marker() const;
  public:
  void clear_marker();
  ::knowrob_ameva::MarkerType marker() const;
  void set_marker(::knowrob_ameva::MarkerType value);
  private:
  ::knowrob_ameva::MarkerType _internal_marker() const;
  void _internal_set_marker(::knowrob_ameva::MarkerType value);
  public:

  // @@protoc_insertion_point(class_scope:knowrob_ameva.ViewEntityTrajParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  float start_;
  float end_;
  float scale_;
  bool unlit_;
  int marker_;
  friend struct ::TableStruct_knowrob_5fameva_2eproto;
};
// -------------------------------------------------------------------

class KRAmevaEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:knowrob_ameva.KRAmevaEvent) */ {
 public:
  inline KRAmevaEvent() : KRAmevaEvent(nullptr) {};
  virtual ~KRAmevaEvent();

  KRAmevaEvent(const KRAmevaEvent& from);
  KRAmevaEvent(KRAmevaEvent&& from) noexcept
    : KRAmevaEvent() {
    *this = ::std::move(from);
  }

  inline KRAmevaEvent& operator=(const KRAmevaEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KRAmevaEvent& operator=(KRAmevaEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KRAmevaEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KRAmevaEvent* internal_default_instance() {
    return reinterpret_cast<const KRAmevaEvent*>(
               &_KRAmevaEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KRAmevaEvent& a, KRAmevaEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KRAmevaEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KRAmevaEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KRAmevaEvent* New() const final {
    return CreateMaybeMessage<KRAmevaEvent>(nullptr);
  }

  KRAmevaEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KRAmevaEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KRAmevaEvent& from);
  void MergeFrom(const KRAmevaEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KRAmevaEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "knowrob_ameva.KRAmevaEvent";
  }
  protected:
  explicit KRAmevaEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_knowrob_5fameva_2eproto);
    return ::descriptor_table_knowrob_5fameva_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef KRAmevaEvent_FuncToCall FuncToCall;
  static constexpr FuncToCall SetDatabase =
    KRAmevaEvent_FuncToCall_SetDatabase;
  static constexpr FuncToCall SetCollection =
    KRAmevaEvent_FuncToCall_SetCollection;
  static constexpr FuncToCall ViewEntityPoseAt =
    KRAmevaEvent_FuncToCall_ViewEntityPoseAt;
  static constexpr FuncToCall ViewEntityTraj =
    KRAmevaEvent_FuncToCall_ViewEntityTraj;
  static inline bool FuncToCall_IsValid(int value) {
    return KRAmevaEvent_FuncToCall_IsValid(value);
  }
  static constexpr FuncToCall FuncToCall_MIN =
    KRAmevaEvent_FuncToCall_FuncToCall_MIN;
  static constexpr FuncToCall FuncToCall_MAX =
    KRAmevaEvent_FuncToCall_FuncToCall_MAX;
  static constexpr int FuncToCall_ARRAYSIZE =
    KRAmevaEvent_FuncToCall_FuncToCall_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FuncToCall_descriptor() {
    return KRAmevaEvent_FuncToCall_descriptor();
  }
  template<typename T>
  static inline const std::string& FuncToCall_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FuncToCall>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FuncToCall_Name.");
    return KRAmevaEvent_FuncToCall_Name(enum_t_value);
  }
  static inline bool FuncToCall_Parse(const std::string& name,
      FuncToCall* value) {
    return KRAmevaEvent_FuncToCall_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kViewEntityPoseParamFieldNumber = 2,
    kViewEntityTrajParamFieldNumber = 3,
    kFuncFieldNumber = 1,
  };
  // optional .knowrob_ameva.ViewEntityPoseAtParams viewEntityPoseParam = 2;
  bool has_viewentityposeparam() const;
  private:
  bool _internal_has_viewentityposeparam() const;
  public:
  void clear_viewentityposeparam();
  const ::knowrob_ameva::ViewEntityPoseAtParams& viewentityposeparam() const;
  ::knowrob_ameva::ViewEntityPoseAtParams* release_viewentityposeparam();
  ::knowrob_ameva::ViewEntityPoseAtParams* mutable_viewentityposeparam();
  void set_allocated_viewentityposeparam(::knowrob_ameva::ViewEntityPoseAtParams* viewentityposeparam);
  private:
  const ::knowrob_ameva::ViewEntityPoseAtParams& _internal_viewentityposeparam() const;
  ::knowrob_ameva::ViewEntityPoseAtParams* _internal_mutable_viewentityposeparam();
  public:
  void unsafe_arena_set_allocated_viewentityposeparam(
      ::knowrob_ameva::ViewEntityPoseAtParams* viewentityposeparam);
  ::knowrob_ameva::ViewEntityPoseAtParams* unsafe_arena_release_viewentityposeparam();

  // optional .knowrob_ameva.ViewEntityTrajParams viewEntityTrajParam = 3;
  bool has_viewentitytrajparam() const;
  private:
  bool _internal_has_viewentitytrajparam() const;
  public:
  void clear_viewentitytrajparam();
  const ::knowrob_ameva::ViewEntityTrajParams& viewentitytrajparam() const;
  ::knowrob_ameva::ViewEntityTrajParams* release_viewentitytrajparam();
  ::knowrob_ameva::ViewEntityTrajParams* mutable_viewentitytrajparam();
  void set_allocated_viewentitytrajparam(::knowrob_ameva::ViewEntityTrajParams* viewentitytrajparam);
  private:
  const ::knowrob_ameva::ViewEntityTrajParams& _internal_viewentitytrajparam() const;
  ::knowrob_ameva::ViewEntityTrajParams* _internal_mutable_viewentitytrajparam();
  public:
  void unsafe_arena_set_allocated_viewentitytrajparam(
      ::knowrob_ameva::ViewEntityTrajParams* viewentitytrajparam);
  ::knowrob_ameva::ViewEntityTrajParams* unsafe_arena_release_viewentitytrajparam();

  // required .knowrob_ameva.KRAmevaEvent.FuncToCall func = 1;
  bool has_func() const;
  private:
  bool _internal_has_func() const;
  public:
  void clear_func();
  ::knowrob_ameva::KRAmevaEvent_FuncToCall func() const;
  void set_func(::knowrob_ameva::KRAmevaEvent_FuncToCall value);
  private:
  ::knowrob_ameva::KRAmevaEvent_FuncToCall _internal_func() const;
  void _internal_set_func(::knowrob_ameva::KRAmevaEvent_FuncToCall value);
  public:

  // @@protoc_insertion_point(class_scope:knowrob_ameva.KRAmevaEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::knowrob_ameva::ViewEntityPoseAtParams* viewentityposeparam_;
  ::knowrob_ameva::ViewEntityTrajParams* viewentitytrajparam_;
  int func_;
  friend struct ::TableStruct_knowrob_5fameva_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ViewEntityPoseAtParams

// required string id = 1;
inline bool ViewEntityPoseAtParams::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ViewEntityPoseAtParams::has_id() const {
  return _internal_has_id();
}
inline void ViewEntityPoseAtParams::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ViewEntityPoseAtParams::id() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.ViewEntityPoseAtParams.id)
  return _internal_id();
}
inline void ViewEntityPoseAtParams::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:knowrob_ameva.ViewEntityPoseAtParams.id)
}
inline std::string* ViewEntityPoseAtParams::mutable_id() {
  // @@protoc_insertion_point(field_mutable:knowrob_ameva.ViewEntityPoseAtParams.id)
  return _internal_mutable_id();
}
inline const std::string& ViewEntityPoseAtParams::_internal_id() const {
  return id_.Get();
}
inline void ViewEntityPoseAtParams::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ViewEntityPoseAtParams::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:knowrob_ameva.ViewEntityPoseAtParams.id)
}
inline void ViewEntityPoseAtParams::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:knowrob_ameva.ViewEntityPoseAtParams.id)
}
inline void ViewEntityPoseAtParams::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:knowrob_ameva.ViewEntityPoseAtParams.id)
}
inline std::string* ViewEntityPoseAtParams::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ViewEntityPoseAtParams::release_id() {
  // @@protoc_insertion_point(field_release:knowrob_ameva.ViewEntityPoseAtParams.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ViewEntityPoseAtParams::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:knowrob_ameva.ViewEntityPoseAtParams.id)
}
inline std::string* ViewEntityPoseAtParams::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:knowrob_ameva.ViewEntityPoseAtParams.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ViewEntityPoseAtParams::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:knowrob_ameva.ViewEntityPoseAtParams.id)
}

// required float timestamp = 2;
inline bool ViewEntityPoseAtParams::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ViewEntityPoseAtParams::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void ViewEntityPoseAtParams::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ViewEntityPoseAtParams::_internal_timestamp() const {
  return timestamp_;
}
inline float ViewEntityPoseAtParams::timestamp() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.ViewEntityPoseAtParams.timestamp)
  return _internal_timestamp();
}
inline void ViewEntityPoseAtParams::_internal_set_timestamp(float value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void ViewEntityPoseAtParams::set_timestamp(float value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:knowrob_ameva.ViewEntityPoseAtParams.timestamp)
}

// required .knowrob_ameva.MarkerType marker = 3;
inline bool ViewEntityPoseAtParams::_internal_has_marker() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ViewEntityPoseAtParams::has_marker() const {
  return _internal_has_marker();
}
inline void ViewEntityPoseAtParams::clear_marker() {
  marker_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::knowrob_ameva::MarkerType ViewEntityPoseAtParams::_internal_marker() const {
  return static_cast< ::knowrob_ameva::MarkerType >(marker_);
}
inline ::knowrob_ameva::MarkerType ViewEntityPoseAtParams::marker() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.ViewEntityPoseAtParams.marker)
  return _internal_marker();
}
inline void ViewEntityPoseAtParams::_internal_set_marker(::knowrob_ameva::MarkerType value) {
  assert(::knowrob_ameva::MarkerType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  marker_ = value;
}
inline void ViewEntityPoseAtParams::set_marker(::knowrob_ameva::MarkerType value) {
  _internal_set_marker(value);
  // @@protoc_insertion_point(field_set:knowrob_ameva.ViewEntityPoseAtParams.marker)
}

// required float scale = 4;
inline bool ViewEntityPoseAtParams::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ViewEntityPoseAtParams::has_scale() const {
  return _internal_has_scale();
}
inline void ViewEntityPoseAtParams::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ViewEntityPoseAtParams::_internal_scale() const {
  return scale_;
}
inline float ViewEntityPoseAtParams::scale() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.ViewEntityPoseAtParams.scale)
  return _internal_scale();
}
inline void ViewEntityPoseAtParams::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000008u;
  scale_ = value;
}
inline void ViewEntityPoseAtParams::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:knowrob_ameva.ViewEntityPoseAtParams.scale)
}

// required string color = 5;
inline bool ViewEntityPoseAtParams::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ViewEntityPoseAtParams::has_color() const {
  return _internal_has_color();
}
inline void ViewEntityPoseAtParams::clear_color() {
  color_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ViewEntityPoseAtParams::color() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.ViewEntityPoseAtParams.color)
  return _internal_color();
}
inline void ViewEntityPoseAtParams::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:knowrob_ameva.ViewEntityPoseAtParams.color)
}
inline std::string* ViewEntityPoseAtParams::mutable_color() {
  // @@protoc_insertion_point(field_mutable:knowrob_ameva.ViewEntityPoseAtParams.color)
  return _internal_mutable_color();
}
inline const std::string& ViewEntityPoseAtParams::_internal_color() const {
  return color_.Get();
}
inline void ViewEntityPoseAtParams::_internal_set_color(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ViewEntityPoseAtParams::set_color(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:knowrob_ameva.ViewEntityPoseAtParams.color)
}
inline void ViewEntityPoseAtParams::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:knowrob_ameva.ViewEntityPoseAtParams.color)
}
inline void ViewEntityPoseAtParams::set_color(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:knowrob_ameva.ViewEntityPoseAtParams.color)
}
inline std::string* ViewEntityPoseAtParams::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000002u;
  return color_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ViewEntityPoseAtParams::release_color() {
  // @@protoc_insertion_point(field_release:knowrob_ameva.ViewEntityPoseAtParams.color)
  if (!_internal_has_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return color_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ViewEntityPoseAtParams::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:knowrob_ameva.ViewEntityPoseAtParams.color)
}
inline std::string* ViewEntityPoseAtParams::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:knowrob_ameva.ViewEntityPoseAtParams.color)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return color_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ViewEntityPoseAtParams::unsafe_arena_set_allocated_color(
    std::string* color) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (color != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  color_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      color, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:knowrob_ameva.ViewEntityPoseAtParams.color)
}

// required bool unlit = 7;
inline bool ViewEntityPoseAtParams::_internal_has_unlit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ViewEntityPoseAtParams::has_unlit() const {
  return _internal_has_unlit();
}
inline void ViewEntityPoseAtParams::clear_unlit() {
  unlit_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ViewEntityPoseAtParams::_internal_unlit() const {
  return unlit_;
}
inline bool ViewEntityPoseAtParams::unlit() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.ViewEntityPoseAtParams.unlit)
  return _internal_unlit();
}
inline void ViewEntityPoseAtParams::_internal_set_unlit(bool value) {
  _has_bits_[0] |= 0x00000010u;
  unlit_ = value;
}
inline void ViewEntityPoseAtParams::set_unlit(bool value) {
  _internal_set_unlit(value);
  // @@protoc_insertion_point(field_set:knowrob_ameva.ViewEntityPoseAtParams.unlit)
}

// -------------------------------------------------------------------

// ViewEntityTrajParams

// required string id = 1;
inline bool ViewEntityTrajParams::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ViewEntityTrajParams::has_id() const {
  return _internal_has_id();
}
inline void ViewEntityTrajParams::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ViewEntityTrajParams::id() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.ViewEntityTrajParams.id)
  return _internal_id();
}
inline void ViewEntityTrajParams::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:knowrob_ameva.ViewEntityTrajParams.id)
}
inline std::string* ViewEntityTrajParams::mutable_id() {
  // @@protoc_insertion_point(field_mutable:knowrob_ameva.ViewEntityTrajParams.id)
  return _internal_mutable_id();
}
inline const std::string& ViewEntityTrajParams::_internal_id() const {
  return id_.Get();
}
inline void ViewEntityTrajParams::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ViewEntityTrajParams::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:knowrob_ameva.ViewEntityTrajParams.id)
}
inline void ViewEntityTrajParams::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:knowrob_ameva.ViewEntityTrajParams.id)
}
inline void ViewEntityTrajParams::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:knowrob_ameva.ViewEntityTrajParams.id)
}
inline std::string* ViewEntityTrajParams::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ViewEntityTrajParams::release_id() {
  // @@protoc_insertion_point(field_release:knowrob_ameva.ViewEntityTrajParams.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ViewEntityTrajParams::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:knowrob_ameva.ViewEntityTrajParams.id)
}
inline std::string* ViewEntityTrajParams::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:knowrob_ameva.ViewEntityTrajParams.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ViewEntityTrajParams::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:knowrob_ameva.ViewEntityTrajParams.id)
}

// required float start = 2;
inline bool ViewEntityTrajParams::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ViewEntityTrajParams::has_start() const {
  return _internal_has_start();
}
inline void ViewEntityTrajParams::clear_start() {
  start_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ViewEntityTrajParams::_internal_start() const {
  return start_;
}
inline float ViewEntityTrajParams::start() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.ViewEntityTrajParams.start)
  return _internal_start();
}
inline void ViewEntityTrajParams::_internal_set_start(float value) {
  _has_bits_[0] |= 0x00000004u;
  start_ = value;
}
inline void ViewEntityTrajParams::set_start(float value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:knowrob_ameva.ViewEntityTrajParams.start)
}

// required float end = 3;
inline bool ViewEntityTrajParams::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ViewEntityTrajParams::has_end() const {
  return _internal_has_end();
}
inline void ViewEntityTrajParams::clear_end() {
  end_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ViewEntityTrajParams::_internal_end() const {
  return end_;
}
inline float ViewEntityTrajParams::end() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.ViewEntityTrajParams.end)
  return _internal_end();
}
inline void ViewEntityTrajParams::_internal_set_end(float value) {
  _has_bits_[0] |= 0x00000008u;
  end_ = value;
}
inline void ViewEntityTrajParams::set_end(float value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:knowrob_ameva.ViewEntityTrajParams.end)
}

// required .knowrob_ameva.MarkerType marker = 4;
inline bool ViewEntityTrajParams::_internal_has_marker() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ViewEntityTrajParams::has_marker() const {
  return _internal_has_marker();
}
inline void ViewEntityTrajParams::clear_marker() {
  marker_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::knowrob_ameva::MarkerType ViewEntityTrajParams::_internal_marker() const {
  return static_cast< ::knowrob_ameva::MarkerType >(marker_);
}
inline ::knowrob_ameva::MarkerType ViewEntityTrajParams::marker() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.ViewEntityTrajParams.marker)
  return _internal_marker();
}
inline void ViewEntityTrajParams::_internal_set_marker(::knowrob_ameva::MarkerType value) {
  assert(::knowrob_ameva::MarkerType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  marker_ = value;
}
inline void ViewEntityTrajParams::set_marker(::knowrob_ameva::MarkerType value) {
  _internal_set_marker(value);
  // @@protoc_insertion_point(field_set:knowrob_ameva.ViewEntityTrajParams.marker)
}

// required float scale = 5;
inline bool ViewEntityTrajParams::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ViewEntityTrajParams::has_scale() const {
  return _internal_has_scale();
}
inline void ViewEntityTrajParams::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ViewEntityTrajParams::_internal_scale() const {
  return scale_;
}
inline float ViewEntityTrajParams::scale() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.ViewEntityTrajParams.scale)
  return _internal_scale();
}
inline void ViewEntityTrajParams::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000010u;
  scale_ = value;
}
inline void ViewEntityTrajParams::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:knowrob_ameva.ViewEntityTrajParams.scale)
}

// required string color = 6;
inline bool ViewEntityTrajParams::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ViewEntityTrajParams::has_color() const {
  return _internal_has_color();
}
inline void ViewEntityTrajParams::clear_color() {
  color_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ViewEntityTrajParams::color() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.ViewEntityTrajParams.color)
  return _internal_color();
}
inline void ViewEntityTrajParams::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:knowrob_ameva.ViewEntityTrajParams.color)
}
inline std::string* ViewEntityTrajParams::mutable_color() {
  // @@protoc_insertion_point(field_mutable:knowrob_ameva.ViewEntityTrajParams.color)
  return _internal_mutable_color();
}
inline const std::string& ViewEntityTrajParams::_internal_color() const {
  return color_.Get();
}
inline void ViewEntityTrajParams::_internal_set_color(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ViewEntityTrajParams::set_color(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:knowrob_ameva.ViewEntityTrajParams.color)
}
inline void ViewEntityTrajParams::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:knowrob_ameva.ViewEntityTrajParams.color)
}
inline void ViewEntityTrajParams::set_color(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:knowrob_ameva.ViewEntityTrajParams.color)
}
inline std::string* ViewEntityTrajParams::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000002u;
  return color_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ViewEntityTrajParams::release_color() {
  // @@protoc_insertion_point(field_release:knowrob_ameva.ViewEntityTrajParams.color)
  if (!_internal_has_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return color_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ViewEntityTrajParams::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:knowrob_ameva.ViewEntityTrajParams.color)
}
inline std::string* ViewEntityTrajParams::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:knowrob_ameva.ViewEntityTrajParams.color)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return color_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ViewEntityTrajParams::unsafe_arena_set_allocated_color(
    std::string* color) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (color != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  color_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      color, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:knowrob_ameva.ViewEntityTrajParams.color)
}

// required bool unlit = 7;
inline bool ViewEntityTrajParams::_internal_has_unlit() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ViewEntityTrajParams::has_unlit() const {
  return _internal_has_unlit();
}
inline void ViewEntityTrajParams::clear_unlit() {
  unlit_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ViewEntityTrajParams::_internal_unlit() const {
  return unlit_;
}
inline bool ViewEntityTrajParams::unlit() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.ViewEntityTrajParams.unlit)
  return _internal_unlit();
}
inline void ViewEntityTrajParams::_internal_set_unlit(bool value) {
  _has_bits_[0] |= 0x00000020u;
  unlit_ = value;
}
inline void ViewEntityTrajParams::set_unlit(bool value) {
  _internal_set_unlit(value);
  // @@protoc_insertion_point(field_set:knowrob_ameva.ViewEntityTrajParams.unlit)
}

// -------------------------------------------------------------------

// KRAmevaEvent

// required .knowrob_ameva.KRAmevaEvent.FuncToCall func = 1;
inline bool KRAmevaEvent::_internal_has_func() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KRAmevaEvent::has_func() const {
  return _internal_has_func();
}
inline void KRAmevaEvent::clear_func() {
  func_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::knowrob_ameva::KRAmevaEvent_FuncToCall KRAmevaEvent::_internal_func() const {
  return static_cast< ::knowrob_ameva::KRAmevaEvent_FuncToCall >(func_);
}
inline ::knowrob_ameva::KRAmevaEvent_FuncToCall KRAmevaEvent::func() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.KRAmevaEvent.func)
  return _internal_func();
}
inline void KRAmevaEvent::_internal_set_func(::knowrob_ameva::KRAmevaEvent_FuncToCall value) {
  assert(::knowrob_ameva::KRAmevaEvent_FuncToCall_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  func_ = value;
}
inline void KRAmevaEvent::set_func(::knowrob_ameva::KRAmevaEvent_FuncToCall value) {
  _internal_set_func(value);
  // @@protoc_insertion_point(field_set:knowrob_ameva.KRAmevaEvent.func)
}

// optional .knowrob_ameva.ViewEntityPoseAtParams viewEntityPoseParam = 2;
inline bool KRAmevaEvent::_internal_has_viewentityposeparam() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || viewentityposeparam_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_viewentityposeparam() const {
  return _internal_has_viewentityposeparam();
}
inline void KRAmevaEvent::clear_viewentityposeparam() {
  if (viewentityposeparam_ != nullptr) viewentityposeparam_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::knowrob_ameva::ViewEntityPoseAtParams& KRAmevaEvent::_internal_viewentityposeparam() const {
  const ::knowrob_ameva::ViewEntityPoseAtParams* p = viewentityposeparam_;
  return p != nullptr ? *p : *reinterpret_cast<const ::knowrob_ameva::ViewEntityPoseAtParams*>(
      &::knowrob_ameva::_ViewEntityPoseAtParams_default_instance_);
}
inline const ::knowrob_ameva::ViewEntityPoseAtParams& KRAmevaEvent::viewentityposeparam() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.KRAmevaEvent.viewEntityPoseParam)
  return _internal_viewentityposeparam();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_viewentityposeparam(
    ::knowrob_ameva::ViewEntityPoseAtParams* viewentityposeparam) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewentityposeparam_);
  }
  viewentityposeparam_ = viewentityposeparam;
  if (viewentityposeparam) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:knowrob_ameva.KRAmevaEvent.viewEntityPoseParam)
}
inline ::knowrob_ameva::ViewEntityPoseAtParams* KRAmevaEvent::release_viewentityposeparam() {
  auto temp = unsafe_arena_release_viewentityposeparam();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::knowrob_ameva::ViewEntityPoseAtParams* KRAmevaEvent::unsafe_arena_release_viewentityposeparam() {
  // @@protoc_insertion_point(field_release:knowrob_ameva.KRAmevaEvent.viewEntityPoseParam)
  _has_bits_[0] &= ~0x00000001u;
  ::knowrob_ameva::ViewEntityPoseAtParams* temp = viewentityposeparam_;
  viewentityposeparam_ = nullptr;
  return temp;
}
inline ::knowrob_ameva::ViewEntityPoseAtParams* KRAmevaEvent::_internal_mutable_viewentityposeparam() {
  _has_bits_[0] |= 0x00000001u;
  if (viewentityposeparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::knowrob_ameva::ViewEntityPoseAtParams>(GetArena());
    viewentityposeparam_ = p;
  }
  return viewentityposeparam_;
}
inline ::knowrob_ameva::ViewEntityPoseAtParams* KRAmevaEvent::mutable_viewentityposeparam() {
  // @@protoc_insertion_point(field_mutable:knowrob_ameva.KRAmevaEvent.viewEntityPoseParam)
  return _internal_mutable_viewentityposeparam();
}
inline void KRAmevaEvent::set_allocated_viewentityposeparam(::knowrob_ameva::ViewEntityPoseAtParams* viewentityposeparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete viewentityposeparam_;
  }
  if (viewentityposeparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(viewentityposeparam);
    if (message_arena != submessage_arena) {
      viewentityposeparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewentityposeparam, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  viewentityposeparam_ = viewentityposeparam;
  // @@protoc_insertion_point(field_set_allocated:knowrob_ameva.KRAmevaEvent.viewEntityPoseParam)
}

// optional .knowrob_ameva.ViewEntityTrajParams viewEntityTrajParam = 3;
inline bool KRAmevaEvent::_internal_has_viewentitytrajparam() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || viewentitytrajparam_ != nullptr);
  return value;
}
inline bool KRAmevaEvent::has_viewentitytrajparam() const {
  return _internal_has_viewentitytrajparam();
}
inline void KRAmevaEvent::clear_viewentitytrajparam() {
  if (viewentitytrajparam_ != nullptr) viewentitytrajparam_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::knowrob_ameva::ViewEntityTrajParams& KRAmevaEvent::_internal_viewentitytrajparam() const {
  const ::knowrob_ameva::ViewEntityTrajParams* p = viewentitytrajparam_;
  return p != nullptr ? *p : *reinterpret_cast<const ::knowrob_ameva::ViewEntityTrajParams*>(
      &::knowrob_ameva::_ViewEntityTrajParams_default_instance_);
}
inline const ::knowrob_ameva::ViewEntityTrajParams& KRAmevaEvent::viewentitytrajparam() const {
  // @@protoc_insertion_point(field_get:knowrob_ameva.KRAmevaEvent.viewEntityTrajParam)
  return _internal_viewentitytrajparam();
}
inline void KRAmevaEvent::unsafe_arena_set_allocated_viewentitytrajparam(
    ::knowrob_ameva::ViewEntityTrajParams* viewentitytrajparam) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewentitytrajparam_);
  }
  viewentitytrajparam_ = viewentitytrajparam;
  if (viewentitytrajparam) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:knowrob_ameva.KRAmevaEvent.viewEntityTrajParam)
}
inline ::knowrob_ameva::ViewEntityTrajParams* KRAmevaEvent::release_viewentitytrajparam() {
  auto temp = unsafe_arena_release_viewentitytrajparam();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::knowrob_ameva::ViewEntityTrajParams* KRAmevaEvent::unsafe_arena_release_viewentitytrajparam() {
  // @@protoc_insertion_point(field_release:knowrob_ameva.KRAmevaEvent.viewEntityTrajParam)
  _has_bits_[0] &= ~0x00000002u;
  ::knowrob_ameva::ViewEntityTrajParams* temp = viewentitytrajparam_;
  viewentitytrajparam_ = nullptr;
  return temp;
}
inline ::knowrob_ameva::ViewEntityTrajParams* KRAmevaEvent::_internal_mutable_viewentitytrajparam() {
  _has_bits_[0] |= 0x00000002u;
  if (viewentitytrajparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::knowrob_ameva::ViewEntityTrajParams>(GetArena());
    viewentitytrajparam_ = p;
  }
  return viewentitytrajparam_;
}
inline ::knowrob_ameva::ViewEntityTrajParams* KRAmevaEvent::mutable_viewentitytrajparam() {
  // @@protoc_insertion_point(field_mutable:knowrob_ameva.KRAmevaEvent.viewEntityTrajParam)
  return _internal_mutable_viewentitytrajparam();
}
inline void KRAmevaEvent::set_allocated_viewentitytrajparam(::knowrob_ameva::ViewEntityTrajParams* viewentitytrajparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete viewentitytrajparam_;
  }
  if (viewentitytrajparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(viewentitytrajparam);
    if (message_arena != submessage_arena) {
      viewentitytrajparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewentitytrajparam, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  viewentitytrajparam_ = viewentitytrajparam;
  // @@protoc_insertion_point(field_set_allocated:knowrob_ameva.KRAmevaEvent.viewEntityTrajParam)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace knowrob_ameva

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::knowrob_ameva::KRAmevaEvent_FuncToCall> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::knowrob_ameva::KRAmevaEvent_FuncToCall>() {
  return ::knowrob_ameva::KRAmevaEvent_FuncToCall_descriptor();
}
template <> struct is_proto_enum< ::knowrob_ameva::MarkerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::knowrob_ameva::MarkerType>() {
  return ::knowrob_ameva::MarkerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_knowrob_5fameva_2eproto
